# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_index_c', [dirname(__file__)])
        except ImportError:
            import _index_c
            return _index_c
        if fp is not None:
            try:
                _mod = imp.load_module('_index_c', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _index_c = swig_import_helper()
    del swig_import_helper
else:
    import _index_c
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DEFAULT_INDEX_JITTER = _index_c.DEFAULT_INDEX_JITTER
class index_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, index_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codekd"] = _index_c.index_t_codekd_set
    __swig_getmethods__["codekd"] = _index_c.index_t_codekd_get
    if _newclass:codekd = _swig_property(_index_c.index_t_codekd_get, _index_c.index_t_codekd_set)
    __swig_setmethods__["quads"] = _index_c.index_t_quads_set
    __swig_getmethods__["quads"] = _index_c.index_t_quads_get
    if _newclass:quads = _swig_property(_index_c.index_t_quads_get, _index_c.index_t_quads_set)
    __swig_setmethods__["starkd"] = _index_c.index_t_starkd_set
    __swig_getmethods__["starkd"] = _index_c.index_t_starkd_get
    if _newclass:starkd = _swig_property(_index_c.index_t_starkd_get, _index_c.index_t_starkd_set)
    __swig_setmethods__["fits"] = _index_c.index_t_fits_set
    __swig_getmethods__["fits"] = _index_c.index_t_fits_get
    if _newclass:fits = _swig_property(_index_c.index_t_fits_get, _index_c.index_t_fits_set)
    __swig_setmethods__["indexname"] = _index_c.index_t_indexname_set
    __swig_getmethods__["indexname"] = _index_c.index_t_indexname_get
    if _newclass:indexname = _swig_property(_index_c.index_t_indexname_get, _index_c.index_t_indexname_set)
    __swig_setmethods__["indexid"] = _index_c.index_t_indexid_set
    __swig_getmethods__["indexid"] = _index_c.index_t_indexid_get
    if _newclass:indexid = _swig_property(_index_c.index_t_indexid_get, _index_c.index_t_indexid_set)
    __swig_setmethods__["healpix"] = _index_c.index_t_healpix_set
    __swig_getmethods__["healpix"] = _index_c.index_t_healpix_get
    if _newclass:healpix = _swig_property(_index_c.index_t_healpix_get, _index_c.index_t_healpix_set)
    __swig_setmethods__["hpnside"] = _index_c.index_t_hpnside_set
    __swig_getmethods__["hpnside"] = _index_c.index_t_hpnside_get
    if _newclass:hpnside = _swig_property(_index_c.index_t_hpnside_get, _index_c.index_t_hpnside_set)
    __swig_setmethods__["index_jitter"] = _index_c.index_t_index_jitter_set
    __swig_getmethods__["index_jitter"] = _index_c.index_t_index_jitter_get
    if _newclass:index_jitter = _swig_property(_index_c.index_t_index_jitter_get, _index_c.index_t_index_jitter_set)
    __swig_setmethods__["cutnside"] = _index_c.index_t_cutnside_set
    __swig_getmethods__["cutnside"] = _index_c.index_t_cutnside_get
    if _newclass:cutnside = _swig_property(_index_c.index_t_cutnside_get, _index_c.index_t_cutnside_set)
    __swig_setmethods__["cutnsweep"] = _index_c.index_t_cutnsweep_set
    __swig_getmethods__["cutnsweep"] = _index_c.index_t_cutnsweep_get
    if _newclass:cutnsweep = _swig_property(_index_c.index_t_cutnsweep_get, _index_c.index_t_cutnsweep_set)
    __swig_setmethods__["cutdedup"] = _index_c.index_t_cutdedup_set
    __swig_getmethods__["cutdedup"] = _index_c.index_t_cutdedup_get
    if _newclass:cutdedup = _swig_property(_index_c.index_t_cutdedup_get, _index_c.index_t_cutdedup_set)
    __swig_setmethods__["cutband"] = _index_c.index_t_cutband_set
    __swig_getmethods__["cutband"] = _index_c.index_t_cutband_get
    if _newclass:cutband = _swig_property(_index_c.index_t_cutband_get, _index_c.index_t_cutband_set)
    __swig_setmethods__["cutmargin"] = _index_c.index_t_cutmargin_set
    __swig_getmethods__["cutmargin"] = _index_c.index_t_cutmargin_get
    if _newclass:cutmargin = _swig_property(_index_c.index_t_cutmargin_get, _index_c.index_t_cutmargin_set)
    __swig_setmethods__["circle"] = _index_c.index_t_circle_set
    __swig_getmethods__["circle"] = _index_c.index_t_circle_get
    if _newclass:circle = _swig_property(_index_c.index_t_circle_get, _index_c.index_t_circle_set)
    __swig_setmethods__["cx_less_than_dx"] = _index_c.index_t_cx_less_than_dx_set
    __swig_getmethods__["cx_less_than_dx"] = _index_c.index_t_cx_less_than_dx_get
    if _newclass:cx_less_than_dx = _swig_property(_index_c.index_t_cx_less_than_dx_get, _index_c.index_t_cx_less_than_dx_set)
    __swig_setmethods__["meanx_less_than_half"] = _index_c.index_t_meanx_less_than_half_set
    __swig_getmethods__["meanx_less_than_half"] = _index_c.index_t_meanx_less_than_half_get
    if _newclass:meanx_less_than_half = _swig_property(_index_c.index_t_meanx_less_than_half_get, _index_c.index_t_meanx_less_than_half_set)
    __swig_setmethods__["index_scale_upper"] = _index_c.index_t_index_scale_upper_set
    __swig_getmethods__["index_scale_upper"] = _index_c.index_t_index_scale_upper_get
    if _newclass:index_scale_upper = _swig_property(_index_c.index_t_index_scale_upper_get, _index_c.index_t_index_scale_upper_set)
    __swig_setmethods__["index_scale_lower"] = _index_c.index_t_index_scale_lower_set
    __swig_getmethods__["index_scale_lower"] = _index_c.index_t_index_scale_lower_get
    if _newclass:index_scale_lower = _swig_property(_index_c.index_t_index_scale_lower_get, _index_c.index_t_index_scale_lower_set)
    __swig_setmethods__["dimquads"] = _index_c.index_t_dimquads_set
    __swig_getmethods__["dimquads"] = _index_c.index_t_dimquads_get
    if _newclass:dimquads = _swig_property(_index_c.index_t_dimquads_get, _index_c.index_t_dimquads_set)
    __swig_setmethods__["nstars"] = _index_c.index_t_nstars_set
    __swig_getmethods__["nstars"] = _index_c.index_t_nstars_get
    if _newclass:nstars = _swig_property(_index_c.index_t_nstars_get, _index_c.index_t_nstars_set)
    __swig_setmethods__["nquads"] = _index_c.index_t_nquads_set
    __swig_getmethods__["nquads"] = _index_c.index_t_nquads_get
    if _newclass:nquads = _swig_property(_index_c.index_t_nquads_get, _index_c.index_t_nquads_set)
    def __init__(self): 
        this = _index_c.new_index_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _index_c.delete_index_t
    __del__ = lambda self : None;
index_t_swigregister = _index_c.index_t_swigregister
index_t_swigregister(index_t)


def index_dimquads(*args):
  return _index_c.index_dimquads(*args)
index_dimquads = _index_c.index_dimquads

def index_overlaps_scale_range(*args):
  return _index_c.index_overlaps_scale_range(*args)
index_overlaps_scale_range = _index_c.index_overlaps_scale_range

def index_is_within_range(*args):
  return _index_c.index_is_within_range(*args)
index_is_within_range = _index_c.index_is_within_range

def index_get_meta(*args):
  return _index_c.index_get_meta(*args)
index_get_meta = _index_c.index_get_meta

def index_is_file_index(*args):
  return _index_c.index_is_file_index(*args)
index_is_file_index = _index_c.index_is_file_index

def index_get_quad_filename(*args):
  return _index_c.index_get_quad_filename(*args)
index_get_quad_filename = _index_c.index_get_quad_filename

def index_get_qidx_filename(*args):
  return _index_c.index_get_qidx_filename(*args)
index_get_qidx_filename = _index_c.index_get_qidx_filename
INDEX_ONLY_LOAD_METADATA = _index_c.INDEX_ONLY_LOAD_METADATA

def index_get_quad_dim(*args):
  return _index_c.index_get_quad_dim(*args)
index_get_quad_dim = _index_c.index_get_quad_dim

def index_get_code_dim(*args):
  return _index_c.index_get_code_dim(*args)
index_get_code_dim = _index_c.index_get_code_dim

def index_nquads(*args):
  return _index_c.index_nquads(*args)
index_nquads = _index_c.index_nquads

def index_nstars(*args):
  return _index_c.index_nstars(*args)
index_nstars = _index_c.index_nstars

def index_build_from(*args):
  return _index_c.index_build_from(*args)
index_build_from = _index_c.index_build_from

def index_load(*args):
  return _index_c.index_load(*args)
index_load = _index_c.index_load

def index_unload(*args):
  return _index_c.index_unload(*args)
index_unload = _index_c.index_unload

def index_reload(*args):
  return _index_c.index_reload(*args)
index_reload = _index_c.index_reload

def index_close_fds(*args):
  return _index_c.index_close_fds(*args)
index_close_fds = _index_c.index_close_fds

def index_close(*args):
  return _index_c.index_close(*args)
index_close = _index_c.index_close

def index_free(*args):
  return _index_c.index_free(*args)
index_free = _index_c.index_free

def index_get_missing_cut_params(*args):
  return _index_c.index_get_missing_cut_params(*args)
index_get_missing_cut_params = _index_c.index_get_missing_cut_params
AN_FILETYPE_CODETREE = _index_c.AN_FILETYPE_CODETREE
CODETREE_NAME = _index_c.CODETREE_NAME
class codetree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, codetree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, codetree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _index_c.codetree_tree_set
    __swig_getmethods__["tree"] = _index_c.codetree_tree_get
    if _newclass:tree = _swig_property(_index_c.codetree_tree_get, _index_c.codetree_tree_set)
    __swig_setmethods__["header"] = _index_c.codetree_header_set
    __swig_getmethods__["header"] = _index_c.codetree_header_get
    if _newclass:header = _swig_property(_index_c.codetree_header_get, _index_c.codetree_header_set)
    __swig_setmethods__["inverse_perm"] = _index_c.codetree_inverse_perm_set
    __swig_getmethods__["inverse_perm"] = _index_c.codetree_inverse_perm_get
    if _newclass:inverse_perm = _swig_property(_index_c.codetree_inverse_perm_get, _index_c.codetree_inverse_perm_set)
    def __init__(self): 
        this = _index_c.new_codetree()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _index_c.delete_codetree
    __del__ = lambda self : None;
codetree_swigregister = _index_c.codetree_swigregister
codetree_swigregister(codetree)


def codetree_open(*args):
  return _index_c.codetree_open(*args)
codetree_open = _index_c.codetree_open

def codetree_open_fits(*args):
  return _index_c.codetree_open_fits(*args)
codetree_open_fits = _index_c.codetree_open_fits

def codetree_get(*args):
  return _index_c.codetree_get(*args)
codetree_get = _index_c.codetree_get

def codetree_N(*args):
  return _index_c.codetree_N(*args)
codetree_N = _index_c.codetree_N

def codetree_nodes(*args):
  return _index_c.codetree_nodes(*args)
codetree_nodes = _index_c.codetree_nodes

def codetree_D(*args):
  return _index_c.codetree_D(*args)
codetree_D = _index_c.codetree_D

def codetree_get_permuted(*args):
  return _index_c.codetree_get_permuted(*args)
codetree_get_permuted = _index_c.codetree_get_permuted

def codetree_header(*args):
  return _index_c.codetree_header(*args)
codetree_header = _index_c.codetree_header

def codetree_close(*args):
  return _index_c.codetree_close(*args)
codetree_close = _index_c.codetree_close

def codetree_new():
  return _index_c.codetree_new()
codetree_new = _index_c.codetree_new

def codetree_append_to(*args):
  return _index_c.codetree_append_to(*args)
codetree_append_to = _index_c.codetree_append_to

def codetree_write_to_file(*args):
  return _index_c.codetree_write_to_file(*args)
codetree_write_to_file = _index_c.codetree_write_to_file

def codetree_write_to_file_flipped(*args):
  return _index_c.codetree_write_to_file_flipped(*args)
codetree_write_to_file_flipped = _index_c.codetree_write_to_file_flipped
AN_FILETYPE_STARTREE = _index_c.AN_FILETYPE_STARTREE
AN_FILETYPE_TAGALONG = _index_c.AN_FILETYPE_TAGALONG
STARTREE_NAME = _index_c.STARTREE_NAME
class startree_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, startree_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, startree_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _index_c.startree_s_tree_set
    __swig_getmethods__["tree"] = _index_c.startree_s_tree_get
    if _newclass:tree = _swig_property(_index_c.startree_s_tree_get, _index_c.startree_s_tree_set)
    __swig_setmethods__["header"] = _index_c.startree_s_header_set
    __swig_getmethods__["header"] = _index_c.startree_s_header_get
    if _newclass:header = _swig_property(_index_c.startree_s_header_get, _index_c.startree_s_header_set)
    __swig_setmethods__["inverse_perm"] = _index_c.startree_s_inverse_perm_set
    __swig_getmethods__["inverse_perm"] = _index_c.startree_s_inverse_perm_get
    if _newclass:inverse_perm = _swig_property(_index_c.startree_s_inverse_perm_get, _index_c.startree_s_inverse_perm_set)
    __swig_setmethods__["sweep"] = _index_c.startree_s_sweep_set
    __swig_getmethods__["sweep"] = _index_c.startree_s_sweep_get
    if _newclass:sweep = _swig_property(_index_c.startree_s_sweep_get, _index_c.startree_s_sweep_set)
    __swig_setmethods__["writing"] = _index_c.startree_s_writing_set
    __swig_getmethods__["writing"] = _index_c.startree_s_writing_get
    if _newclass:writing = _swig_property(_index_c.startree_s_writing_get, _index_c.startree_s_writing_set)
    __swig_setmethods__["tagalong"] = _index_c.startree_s_tagalong_set
    __swig_getmethods__["tagalong"] = _index_c.startree_s_tagalong_get
    if _newclass:tagalong = _swig_property(_index_c.startree_s_tagalong_get, _index_c.startree_s_tagalong_set)
    def __init__(self): 
        this = _index_c.new_startree_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _index_c.delete_startree_s
    __del__ = lambda self : None;
startree_s_swigregister = _index_c.startree_s_swigregister
startree_s_swigregister(startree_s)


def startree_open(*args):
  return _index_c.startree_open(*args)
startree_open = _index_c.startree_open

def startree_open_fits(*args):
  return _index_c.startree_open_fits(*args)
startree_open_fits = _index_c.startree_open_fits

def startree_search_for(*args):
  return _index_c.startree_search_for(*args)
startree_search_for = _index_c.startree_search_for

def startree_search_for_radec(*args):
  return _index_c.startree_search_for_radec(*args)
startree_search_for_radec = _index_c.startree_search_for_radec

def startree_search(*args):
  return _index_c.startree_search(*args)
startree_search = _index_c.startree_search

def startree_get_data_column(*args):
  return _index_c.startree_get_data_column(*args)
startree_get_data_column = _index_c.startree_get_data_column

def startree_get_data_column_int64(*args):
  return _index_c.startree_get_data_column_int64(*args)
startree_get_data_column_int64 = _index_c.startree_get_data_column_int64

def startree_get_data_column_array(*args):
  return _index_c.startree_get_data_column_array(*args)
startree_get_data_column_array = _index_c.startree_get_data_column_array

def startree_free_data_column(*args):
  return _index_c.startree_free_data_column(*args)
startree_free_data_column = _index_c.startree_free_data_column

def startree_has_tagalong(*args):
  return _index_c.startree_has_tagalong(*args)
startree_has_tagalong = _index_c.startree_has_tagalong

def startree_get_tagalong(*args):
  return _index_c.startree_get_tagalong(*args)
startree_get_tagalong = _index_c.startree_get_tagalong

def startree_get_tagalong_column_names(*args):
  return _index_c.startree_get_tagalong_column_names(*args)
startree_get_tagalong_column_names = _index_c.startree_get_tagalong_column_names

def startree_get_tagalong_N_columns(*args):
  return _index_c.startree_get_tagalong_N_columns(*args)
startree_get_tagalong_N_columns = _index_c.startree_get_tagalong_N_columns

def startree_get_tagalong_column_name(*args):
  return _index_c.startree_get_tagalong_column_name(*args)
startree_get_tagalong_column_name = _index_c.startree_get_tagalong_column_name

def startree_get_tagalong_column_fits_type(*args):
  return _index_c.startree_get_tagalong_column_fits_type(*args)
startree_get_tagalong_column_fits_type = _index_c.startree_get_tagalong_column_fits_type

def startree_get_tagalong_column_array_size(*args):
  return _index_c.startree_get_tagalong_column_array_size(*args)
startree_get_tagalong_column_array_size = _index_c.startree_get_tagalong_column_array_size

def startree_get_cut_nside(*args):
  return _index_c.startree_get_cut_nside(*args)
startree_get_cut_nside = _index_c.startree_get_cut_nside

def startree_get_cut_nsweeps(*args):
  return _index_c.startree_get_cut_nsweeps(*args)
startree_get_cut_nsweeps = _index_c.startree_get_cut_nsweeps

def startree_get_cut_dedup(*args):
  return _index_c.startree_get_cut_dedup(*args)
startree_get_cut_dedup = _index_c.startree_get_cut_dedup

def startree_get_cut_band(*args):
  return _index_c.startree_get_cut_band(*args)
startree_get_cut_band = _index_c.startree_get_cut_band

def startree_get_cut_margin(*args):
  return _index_c.startree_get_cut_margin(*args)
startree_get_cut_margin = _index_c.startree_get_cut_margin

def startree_get_jitter(*args):
  return _index_c.startree_get_jitter(*args)
startree_get_jitter = _index_c.startree_get_jitter

def startree_set_jitter(*args):
  return _index_c.startree_set_jitter(*args)
startree_set_jitter = _index_c.startree_set_jitter

def startree_get_sweep(*args):
  return _index_c.startree_get_sweep(*args)
startree_get_sweep = _index_c.startree_get_sweep

def startree_N(*args):
  return _index_c.startree_N(*args)
startree_N = _index_c.startree_N

def startree_nodes(*args):
  return _index_c.startree_nodes(*args)
startree_nodes = _index_c.startree_nodes

def startree_D(*args):
  return _index_c.startree_D(*args)
startree_D = _index_c.startree_D

def startree_header(*args):
  return _index_c.startree_header(*args)
startree_header = _index_c.startree_header

def startree_get(*args):
  return _index_c.startree_get(*args)
startree_get = _index_c.startree_get

def startree_get_radec(*args):
  return _index_c.startree_get_radec(*args)
startree_get_radec = _index_c.startree_get_radec

def startree_close(*args):
  return _index_c.startree_close(*args)
startree_close = _index_c.startree_close

def startree_compute_inverse_perm(*args):
  return _index_c.startree_compute_inverse_perm(*args)
startree_compute_inverse_perm = _index_c.startree_compute_inverse_perm

def startree_check_inverse_perm(*args):
  return _index_c.startree_check_inverse_perm(*args)
startree_check_inverse_perm = _index_c.startree_check_inverse_perm

def startree_new():
  return _index_c.startree_new()
startree_new = _index_c.startree_new

def startree_write_to_file(*args):
  return _index_c.startree_write_to_file(*args)
startree_write_to_file = _index_c.startree_write_to_file

def startree_write_to_file_flipped(*args):
  return _index_c.startree_write_to_file_flipped(*args)
startree_write_to_file_flipped = _index_c.startree_write_to_file_flipped

def startree_append_to(*args):
  return _index_c.startree_append_to(*args)
startree_append_to = _index_c.startree_append_to
class qidxfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qidxfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qidxfile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numstars"] = _index_c.qidxfile_numstars_set
    __swig_getmethods__["numstars"] = _index_c.qidxfile_numstars_get
    if _newclass:numstars = _swig_property(_index_c.qidxfile_numstars_get, _index_c.qidxfile_numstars_set)
    __swig_setmethods__["numquads"] = _index_c.qidxfile_numquads_set
    __swig_getmethods__["numquads"] = _index_c.qidxfile_numquads_get
    if _newclass:numquads = _swig_property(_index_c.qidxfile_numquads_get, _index_c.qidxfile_numquads_set)
    __swig_setmethods__["dimquads"] = _index_c.qidxfile_dimquads_set
    __swig_getmethods__["dimquads"] = _index_c.qidxfile_dimquads_get
    if _newclass:dimquads = _swig_property(_index_c.qidxfile_dimquads_get, _index_c.qidxfile_dimquads_set)
    __swig_setmethods__["fb"] = _index_c.qidxfile_fb_set
    __swig_getmethods__["fb"] = _index_c.qidxfile_fb_get
    if _newclass:fb = _swig_property(_index_c.qidxfile_fb_get, _index_c.qidxfile_fb_set)
    __swig_setmethods__["index"] = _index_c.qidxfile_index_set
    __swig_getmethods__["index"] = _index_c.qidxfile_index_get
    if _newclass:index = _swig_property(_index_c.qidxfile_index_get, _index_c.qidxfile_index_set)
    __swig_setmethods__["heap"] = _index_c.qidxfile_heap_set
    __swig_getmethods__["heap"] = _index_c.qidxfile_heap_get
    if _newclass:heap = _swig_property(_index_c.qidxfile_heap_get, _index_c.qidxfile_heap_set)
    __swig_setmethods__["cursor_index"] = _index_c.qidxfile_cursor_index_set
    __swig_getmethods__["cursor_index"] = _index_c.qidxfile_cursor_index_get
    if _newclass:cursor_index = _swig_property(_index_c.qidxfile_cursor_index_get, _index_c.qidxfile_cursor_index_set)
    __swig_setmethods__["cursor_heap"] = _index_c.qidxfile_cursor_heap_set
    __swig_getmethods__["cursor_heap"] = _index_c.qidxfile_cursor_heap_get
    if _newclass:cursor_heap = _swig_property(_index_c.qidxfile_cursor_heap_get, _index_c.qidxfile_cursor_heap_set)
    def __init__(self): 
        this = _index_c.new_qidxfile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _index_c.delete_qidxfile
    __del__ = lambda self : None;
qidxfile_swigregister = _index_c.qidxfile_swigregister
qidxfile_swigregister(qidxfile)


def qidxfile_close(*args):
  return _index_c.qidxfile_close(*args)
qidxfile_close = _index_c.qidxfile_close

def qidxfile_get_quads(*args):
  return _index_c.qidxfile_get_quads(*args)
qidxfile_get_quads = _index_c.qidxfile_get_quads

def qidxfile_write_star(*args):
  return _index_c.qidxfile_write_star(*args)
qidxfile_write_star = _index_c.qidxfile_write_star

def qidxfile_write_header(*args):
  return _index_c.qidxfile_write_header(*args)
qidxfile_write_header = _index_c.qidxfile_write_header

def qidxfile_open(*args):
  return _index_c.qidxfile_open(*args)
qidxfile_open = _index_c.qidxfile_open

def qidxfile_open_for_writing(*args):
  return _index_c.qidxfile_open_for_writing(*args)
qidxfile_open_for_writing = _index_c.qidxfile_open_for_writing

def qidxfile_get_header(*args):
  return _index_c.qidxfile_get_header(*args)
qidxfile_get_header = _index_c.qidxfile_get_header

def code_alloc(*args):
  return _index_c.code_alloc(*args)
code_alloc = _index_c.code_alloc

def code_free(*args):
  return _index_c.code_free(*args)
code_free = _index_c.code_free

def code_get(*args):
  return _index_c.code_get(*args)
code_get = _index_c.code_get

def codekd_addr(*args):
  return _index_c.codekd_addr(*args)
codekd_addr = _index_c.codekd_addr

def starkd_addr(*args):
  return _index_c.starkd_addr(*args)
starkd_addr = _index_c.starkd_addr

def quadfile_addr(*args):
  return _index_c.quadfile_addr(*args)
quadfile_addr = _index_c.quadfile_addr

def qidxfile_addr(*args):
  return _index_c.qidxfile_addr(*args)
qidxfile_addr = _index_c.qidxfile_addr

def log_init(*args):
  return _index_c.log_init(*args)
log_init = _index_c.log_init
# This file is compatible with both classic and new-style classes.


